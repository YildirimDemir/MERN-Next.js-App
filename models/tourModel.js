import mongoose, { Schema } from "mongoose";
import slugify from "slugify";
import Review from "./reviewModel";
// const validator = require("validator");
//* For embedding => const User = require("./userModel");

const tourSchema = new Schema({
    name: {
        type: String,
        required: [true, "A tour must have a name"],
        unique: true,
        trim: true,
        maxlength: [40, "A tour name must have less or equal then 40 characters"],
        minlength: [10, "A tour name must have greater or equal then 10 characters"]
        //* Validator Library =>
        // validate: [validator.isLowercase, "Tour name not uppercase"]
    },
    slug: String,
    duration: {
        type: Number,
        required: [true, "A tour must have a duration"]
    },
    maxGroupSize: {
        type: Number,
        required: [true, "A tour must have a group size"]
    },
    difficulty: {
        type: String,
        required: [true, "A tour must have a difficulty"],
        trim: true,
        enum: {
            values: ["easy", "medium", "difficult"],
            message: "Difficulty is either: easy, medium, difficult"
        }
    },
    ratingsAverage: {
        type: Number,
        default: 4.5,
        min: [1, "Rating must be above 1.0"],
        max: [5, "Rating must be below 5.0"],
        set: val => Math.round(val * 10) / 10
    },
    ratingsQuantity: {
        type: Number,
        default: 0
    },
    likesCount: {
        type: Number,
        default: 0
    },
    price: {
        type: Number,
        required: [true, "A tour must have a price"]
    },
    priceDiscount: {
        type: Number,
        //* Custom Validator
        validate: {
            validator: function (val) {
                //* this only points to current doc on NEW document creation
                return val < this.price;
            },
            message: "Discount price ({VALUE}) should be below regular price"
        }
    },
    summary: {
        type: String,
        trim: true,
        required: [true, "A tour must have a summary"]
    },
    description: {
        type: String,
        trim: true
    },
    imageCover: {
        type: String,
        required: [true, "A tour must have a image"]
    },
    images: [String],
    createdAt: {
        type: Date,
        default: Date.now(),
        select: false
    },
    startDates: [Date],
    secretTour: {
        type: Boolean,
        default: false
    },
    startLocation: {
        //* GeoJSON
        type: {
            type: String,
            default: "Point",
            enum: ["Point"]
        },
        coordinates: [Number],
        address: String,
        description: String
    },
    locations: Object,
    guides: [
        {
            type: Schema.ObjectId,
            ref: "User"
        }
    ]
},
    {
        toJSON: { virtuals: true },
        toObject: { virtuals: true }
    });

//* The index in this context serves to improve query performance by allowing faster data retrieval, particularly for fields commonly used in queries.
tourSchema.index({ price: 1, ratingsAverage: -1 });
tourSchema.index({ slug: 1 });
tourSchema.index({ startLocation: "2dsphere" });

//! Virtual Property
tourSchema.virtual("durationWeeks").get(function () {
    return this.duration / 7;
});

//! Virtual Populate
// tourSchema.virtual("bookings", {
//     ref: "Booking",
//     foreignField: "tour",
//     localField: "_id"
// });

tourSchema.virtual("reviews", {
    ref: Review,
    foreignField: "tour",
    localField: "_id"
});

//! Mongeese(Document) Middleware
//* Triggered only when new document is created
tourSchema.pre("save", function (next) {
    this.slug = slugify(this.name, { lower: true });
    next();
});

//! Embedding Example
// tourSchema.pre("save", async function (next) {
//     //* In this line of code, guidesPromises is an array of promises generated by mapping over the guides array, and for each id, 
//     //* it asynchronously fetches the corresponding user by their id using User.findById(id).
//     const guidesPromises = this.guides.map(async id => await User.findById(id));

//     //* In this line of code, `this.guides` is updated by awaiting the resolution of all the promises in the `guidesPromises` array using `Promise.all`. 
//     //* This results in `this.guides` being assigned an array of user documents, replacing the original guide IDs.
//     this.guides = await Promise.all(guidesPromises);

//     next();
// });

// tourSchema.post("save", function (doc, next) {
//     console.log(doc);
//     next();
// });

//! Query Middleware
tourSchema.pre(/^find/, function (next) {
    this.find({ secretTour: { $ne: true } });
    this.start = Date.now();
    next();
});

tourSchema.pre(/^find/, function (next) {
    //* In this code, `this.populate()` is used to fetch and include additional data related to the "guides" field within the document, 
    //* while excluding specific fields (in this case, "__v" and "passwordChangeAt") from the populated documents.
    this.populate({
        path: "guides",
        select: "-__v -passwordChangeAt"
    });

    next();
});


tourSchema.pre(/^find/, function (next) {
    console.log(`Query took ${Date.now() - this.start} milliseconds!`);
    // console.log(this);
    next();
});

//! Aggregation Middleware
// tourSchema.pre("aggregate", function (next) {
//     this.pipeline().unshift({ $match: { secretTour: { $ne: true } } });
//     next();
// });

const Tour = mongoose.models.Tour || mongoose.model("Tour", tourSchema);

export default Tour;
